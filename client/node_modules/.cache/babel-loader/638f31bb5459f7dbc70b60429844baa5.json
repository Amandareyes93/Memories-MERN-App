{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nexport default (function () {\n  let posts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FETCH_ALL:\n      return action.payload;\n    case LIKE:\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n    case CREATE:\n      return [...posts, action.payload];\n    case UPDATE:\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n    case DELETE:\n      return posts.filter(post => post._id !== action.payload);\n    default:\n      return posts;\n  }\n});\n\n// import * as api from '../api/index';\n// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n// export const getPostAsync = createAsyncThunk(\n//   'posts/getPosts',\n//   async () => {\n//     const {data} = await api.fetchPosts();\n//     return data;\n//   }\n// );\n// export const postsSlice = createSlice({\n//   name: 'posts',\n//   initialState: {\n//     isLoading: false,\n//     value: [],\n//   },\n//   reducers: {\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(getPostAsync.pending, (state) => {\n//         debugger\n//         state.isLoading = true;\n//       })\n//       .addCase(getPostAsync.fulfilled, (state, action) => {\n//         debugger\n//         state.isLoading = false;\n//         state.value = [{pepe: 'hola'}];\n//       });\n//   },\n// });\n\n// // Action creators are generated for each case reducer function\n// export const {  } = postsSlice.actions;\n\n// export default postsSlice.reducer;","map":{"version":3,"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","posts","arguments","length","undefined","action","type","payload","map","post","_id","filter"],"sources":["C:/Users/amand/Documents/Projects/MERN-Memories-App/MERN-Memories-App-Amanda/clientv/src/reducers/posts.js"],"sourcesContent":["import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\n\r\nexport default (posts = [], action) => {\r\n  switch (action.type) {\r\n    case FETCH_ALL:\r\n      return action.payload;\r\n    case LIKE:\r\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\r\n    case CREATE:\r\n      return [...posts, action.payload];\r\n    case UPDATE:\r\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\r\n    case DELETE:\r\n      return posts.filter((post) => post._id !== action.payload);\r\n    default:\r\n      return posts;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import * as api from '../api/index';\r\n// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// export const getPostAsync = createAsyncThunk(\r\n//   'posts/getPosts',\r\n//   async () => {\r\n//     const {data} = await api.fetchPosts();\r\n//     return data;\r\n//   }\r\n// );\r\n// export const postsSlice = createSlice({\r\n//   name: 'posts',\r\n//   initialState: {\r\n//     isLoading: false,\r\n//     value: [],\r\n//   },\r\n//   reducers: {\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(getPostAsync.pending, (state) => {\r\n//         debugger\r\n//         state.isLoading = true;\r\n//       })\r\n//       .addCase(getPostAsync.fulfilled, (state, action) => {\r\n//         debugger\r\n//         state.isLoading = false;\r\n//         state.value = [{pepe: 'hola'}];\r\n//       });\r\n//   },\r\n// });\r\n\r\n// // Action creators are generated for each case reducer function\r\n// export const {  } = postsSlice.actions;\r\n\r\n// export default postsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAI,QAAQ,0BAA0B;AAElF,gBAAe,YAAwB;EAAA,IAAvBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAChC,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAKV,SAAS;MACZ,OAAOS,MAAM,CAACE,OAAO;IACvB,KAAKP,IAAI;MACP,OAAOC,KAAK,CAACO,GAAG,CAAEC,IAAI,IAAMA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACE,OAAO,CAACG,GAAG,GAAGL,MAAM,CAACE,OAAO,GAAGE,IAAK,CAAC;IACvF,KAAKZ,MAAM;MACT,OAAO,CAAC,GAAGI,KAAK,EAAEI,MAAM,CAACE,OAAO,CAAC;IACnC,KAAKT,MAAM;MACT,OAAOG,KAAK,CAACO,GAAG,CAAEC,IAAI,IAAMA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACE,OAAO,CAACG,GAAG,GAAGL,MAAM,CAACE,OAAO,GAAGE,IAAK,CAAC;IACvF,KAAKV,MAAM;MACT,OAAOE,KAAK,CAACU,MAAM,CAAEF,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACE,OAAO,CAAC;IAC5D;MACE,OAAON,KAAK;EAAC;AAEnB,CAAC;;AAQD;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}